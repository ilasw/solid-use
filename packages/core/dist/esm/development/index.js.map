{
  "version": 3,
  "sources": ["../../../src/browser/use-media.ts", "../../../src/logical/use-toggle.ts", "../../../src/network/use-network-state.ts", "../../../src/browser/use-event-listener.ts"],
  "sourcesContent": ["import {isServer} from \"solid-js/web\";\nimport {createSignal, onCleanup, onMount} from \"solid-js\";\n\nexport const useMedia = (query: string) => {\n  const [state, setState] = createSignal<null | boolean>(null);\n\n  const mediaQuery = globalThis?.matchMedia(query);\n  const updateValue = () => setState(mediaQuery?.matches);\n\n  onMount(() => {\n    if (isServer) return;\n\n    updateValue();\n\n    if ('addEventListener' in mediaQuery!) {\n      mediaQuery.addEventListener('change', updateValue)\n    } else {\n      mediaQuery?.addListener(updateValue)\n    }\n  });\n\n  onCleanup(() => {\n    if (isServer) return;\n\n    if ('removeEventListener' in mediaQuery!) {\n      mediaQuery!.removeEventListener('change', updateValue)\n    } else {\n      mediaQuery!.removeListener(updateValue)\n    }\n  })\n\n  return state;\n}", "import {createSignal} from \"solid-js\";\n\nexport const useToggle = (initialStatus: boolean) => {\n  const [state, setState] = createSignal(initialStatus);\n  const toggle = () => setState(!state());\n\n  return [state, toggle];\n}", "import {createSignal} from \"solid-js\";\nimport {useEventListener} from \"@/browser/use-event-listener\";\nimport {isServer} from \"solid-js/web\";\n\nexport const useNetworkState = () => {\n  const [state, setState] = createSignal<{ isOnline: boolean | null }>({isOnline: null});\n\n  const updateNetworkInformation = () => {\n    if (isServer || !navigator) return;\n    setState({isOnline: navigator.onLine})\n  }\n\n  updateNetworkInformation();\n  useEventListener('offline', updateNetworkInformation, {passive: true});\n  useEventListener('online', updateNetworkInformation, {passive: true});\n\n  return state;\n}", "import {onCleanup, onMount} from \"solid-js\";\nimport {isServer} from \"solid-js/web\";\n\nexport const useEventListener = <E extends keyof WindowEventMap>(\n    event: E,\n    callback: (this: Window, ev: WindowEventMap[E]) => any,\n    options: boolean | AddEventListenerOptions = {}\n) => {\n\n  onMount(() => {\n    if (isServer) return;\n    globalThis.addEventListener(event, callback, options);\n  });\n\n  onCleanup(() => {\n    if (isServer) return;\n    globalThis.removeEventListener(event, callback);\n  });\n}"],
  "mappings": ";AAAA;AACA;AAEO,IAAM,WAAW,CAAC,UAAkB;AACzC,QAAM,CAAC,OAAO,YAAY,aAA6B,IAAI;AAE3D,QAAM,aAAa,yCAAY,WAAW;AAC1C,QAAM,cAAc,MAAM,SAAS,yCAAY,OAAO;AAEtD,UAAQ,MAAM;AACZ,QAAI;AAAU;AAEd,gBAAY;AAEZ,QAAI,sBAAsB,YAAa;AACrC,iBAAW,iBAAiB,UAAU,WAAW;AAAA,IACnD,OAAO;AACL,+CAAY,YAAY;AAAA,IAC1B;AAAA,EACF,CAAC;AAED,YAAU,MAAM;AACd,QAAI;AAAU;AAEd,QAAI,yBAAyB,YAAa;AACxC,iBAAY,oBAAoB,UAAU,WAAW;AAAA,IACvD,OAAO;AACL,iBAAY,eAAe,WAAW;AAAA,IACxC;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;AChCA;AAEO,IAAM,YAAY,CAAC,kBAA2B;AACnD,QAAM,CAAC,OAAO,YAAY,cAAa,aAAa;AACpD,QAAM,SAAS,MAAM,SAAS,CAAC,MAAM,CAAC;AAEtC,SAAO,CAAC,OAAO,MAAM;AACvB;;;ACPA;;;ACAA;AACA;AAEO,IAAM,mBAAmB,CAC5B,OACA,UACA,UAA6C,CAAC,MAC7C;AAEH,WAAQ,MAAM;AACZ,QAAI;AAAU;AACd,eAAW,iBAAiB,OAAO,UAAU,OAAO;AAAA,EACtD,CAAC;AAED,aAAU,MAAM;AACd,QAAI;AAAU;AACd,eAAW,oBAAoB,OAAO,QAAQ;AAAA,EAChD,CAAC;AACH;;;ADhBA;AAEO,IAAM,kBAAkB,MAAM;AACnC,QAAM,CAAC,OAAO,YAAY,cAA2C,EAAC,UAAU,KAAI,CAAC;AAErF,QAAM,2BAA2B,MAAM;AACrC,QAAI,aAAY,CAAC;AAAW;AAC5B,aAAS,EAAC,UAAU,UAAU,OAAM,CAAC;AAAA,EACvC;AAEA,2BAAyB;AACzB,mBAAiB,WAAW,0BAA0B,EAAC,SAAS,KAAI,CAAC;AACrE,mBAAiB,UAAU,0BAA0B,EAAC,SAAS,KAAI,CAAC;AAEpE,SAAO;AACT;",
  "names": []
}
